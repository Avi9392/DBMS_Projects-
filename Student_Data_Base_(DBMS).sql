CREATE DATABASE PROJ
USE PROJ
CREATE TABLE DEPARTMENT(
    DEPARTMENT_ID INT PRIMARY KEY,
    DEPAARTMENT_NAME VARCHAR(100));

INSERT INTO DEPARTMENT VALUES
(1,'COMPUTER SCIENCE'),
(2,'BUSINESS ADMINISTRATION'),
(3,'ELECTRICAAL ENGINEERING'),
(4,'CIVIL ENGINEERING'),
(5,'BIOTECHNOLOGY');
SELECT * FROM DEPARTMENT;
ALTER TABLE DEPARTMENT DROP DEPARTMENT_ID,DEPARTMENT_NAME
CREATE TABLE COURSE(
    COURSE_ID INT PRIMARY KEY,
    COURSE_NAME VARCHAR(35)
);
INSERT INTO COURSE VALUES
(111,'BCA'),
(222,'BBA'),
(333,'EE'),
(444,'CE'),
(555,'BTY');

ALTER TABLE COURSE ADD COURSE_DURATION VARCHAR(50);
SELECT * FROM COURSE;

 CREATE TABLE TEACHERSS
 (TEACHER_ID INT PRIMARY KEY,
 TEACHER_NAME VARCHAR(25) NOT NULL,
 QUAIFICATION VARCHAR(35) NOT NULL,
 T_COURSE_ID INT FOREIGN KEY REFERENCES COURSE(COURSE_ID),
 T_DEPARTMENT INT  FOREIGN KEY REFERENCES DEPARTMENT(DEPARTMENT_ID) );

 INSERT INTO TEACHERSS VALUES
 (112,'MANMOHAN SHARMA','CLUOD COMPUTING PROFESSIONAL',111,1),
 (123,'AKASH SHING','EE ENGINEER',333,3),
 (456,'NANDAN PANDEY','BUSINESS ADMINISTRATER',222,2),
 (789,'LAXMI KUMARI','PHD ENVORIMENTAL SCIENCE',555,5),
 (102,'HARISHWAR ','PHD IN ENGINEERING',444,4);
 SELECT * FROM TEACHERSS WHERE TEACHER_ID='123';

 SELECT * FROM TEACHERSS;

 ALTER TABLE TEACHERSS
 ADD AGE INT,GENDER VARCHAR(23);

UPDATE TEACHERSS SET AGE='39' WHERE TEACHER_ID=123 ;
UPDATE TEACHERSS SET AGE='50' WHERE TEACHER_ID=112;
UPDATE TEACHERSS SET AGE='35' WHERE TEACHER_ID=456;
UPDATE TEACHERSS SET AGE='40' WHERE TEACHER_ID=789;
UPDATE TEACHERSS SET AGE='45' WHERE TEACHER_ID=102;


UPDATE TEACHERSS SET GENDER='MALE' WHERE TEACHER_ID=123 ;
UPDATE TEACHERSS SET GENDER='MALE' WHERE TEACHER_ID=112;
UPDATE TEACHERSS SET GENDER='MALE' WHERE TEACHER_ID=456;
UPDATE TEACHERSS SET GENDER='FEMALE' WHERE TEACHER_ID=789;
UPDATE TEACHERSS SET GENDER='FEMALE' WHERE TEACHER_ID=102;

UPDATE TEACHERSS SET GENDER='MALE' WHERE TEACHER_ID=102;
UPDATE TEACHERSS SET GENDER='FEMALE' WHERE TEACHER_ID=456;

SELECT * FROM TEACHERSS;





 DROP TABLE TECHERSS;


  
 CREATE TABLE STUDENTSINFO
 (
    STUDENTS_ID INT PRIMARY KEY,
    STUDENTS_NAME VARCHAR(35)NOT NULL,
    GENDER VARCHAR(50)  NOT NULL,
    AGE INT NOT NULL CHECK(AGE>18),
    EMAIL VARCHAR (50) NOT NULL,
    PHONE_NO VARCHAR(50) NOT NULL,
    ADDRESS_INFO VARCHAR(50) NOT NULL,
    STD_COURSE_ID INT FOREIGN KEY REFERENCES COURSE(COURSE_ID)NOT NULL,
    STD_DEPARTMENT_ID INT FOREIGN KEY REFERENCES DEPARTMENT(DEPARTMENT_ID)NOT NULL
 );

INSERT INTO STUDENTSINFO VALUES
(1111,'AVINASH SHARMA','MALE',19,'sharmaavinash564@gmail.com','9876545678','NEW DELHI-RAHESPUR-420',111,1),
(2222,'HARISHWAR','MALE',20,'harshwarpandey345@gmail.com','7865646544','patna hoseyarpur-240',222,2),
(3333,'AMBATY KUMAR','MALE',21,'ambatyrakesh840gmail.com','6786533534','hyderabad-batipur',333,3),
(4444,'KALI DAVI','FEMALE',22,'kalikumaridevi@gmail.com','6789654367','GOA-hptown',444,4),
(5555,'MUSKAN','FEMALE',22,'muskankumari536@gmail.com','9845678999','BIHAR-MUJAPHARPUR',555,5);

--HERE WE HAVE TAKEN TEN STUDENTSINFO--

SELECT * FROM STUDENTSINFO;

CREATE TABLE SUBJECTS__INFO
(
    STD_SUBJECT_ID INT PRIMARY KEY ,
    SUBJECT_NAME VARCHAR(50)NOT NULL,
    SUB_COURSE_ID INT FOREIGN KEY REFERENCES COURSE(COURSE_ID),
    SUB_TEACHER_ID INT FOREIGN KEY REFERENCES TEACHERSS(TEACHER_ID)
);
 
 INSERT INTO SUBJECTS__INFO VALUES
 (11111,'COMPUTER NETWORKS',111,112),
 (22222,'CURRENT ELECTRICITY',333,123),
 (33333,'CHEMISTRY',444,102),
 (44444,'ACCOUNTS',222,456),
 (55555,'ENVORIMANTAL CHEMISTRY',555,789);

 SELECT * FROM SUBJECTS__INFO;

CREATE TABLE MARKSS___INFO
(
  MARKS_ID INT PRIMARY KEY,
  MAR_STUDENTS_ID INT FOREIGN KEY  REFERENCES STUDENTSINFO(STUDENTS_ID),
  MAR_SUBJECTS_ID INT FOREIGN KEY REFERENCES SUBJECTS__INFO(STD_SUBJECT_ID),
  PASS_MARKS VARCHAR(100)  NOT NULL,
  PAPER_CONDUCT_TOTAL VARCHAR(100) NOT NULL ,
  MARKS_OBTAIN VARCHAR(100) ,
  TOTAL_MARKS VARCHAR(100),
  EXAM_TYPE VARCHAR(100) NOT NULL,
  FINAL_RESULT VARCHAR (100)
   );
   DROP TABLE MARKS__INFO;

  INSERT INTO MARKSS___INFO VALUES
  (11,1111,11111,'45','100','70','70','OFFLINE','PASS'),
  (22,2222,22222,'45','100','43','43','OFFLINE','FAILED'),
  (33,3333,33333,'45','100','99','99','OFFLINE','PASS'),
  (44,4444,44444,'45','100','85','85','ONLINE','PASS'),
  (55,5555,55555,'45','100','90','90','OFFLINE','PASS');

  --HERE WE HAVE TAKEN 10 STUDENS MARKS___INFO--

SELECT * FROM MARKSS___INFO;


--JOINS ALL TYPE--
SELECT STUDENTSINFO.STUDENTS_NAME, COURSE.COURSE_NAME FROM STUDENTSINFO INNER JOIN COURSE ON STUDENTSINFO.STD_COURSE_ID = COURSE.COURSE_ID;

SELECT S.STUDENTS_NAME, SUB.SUBJECT_NAME FROM STUDENTSINFO S LEFT JOIN SUBJECTS__INFO SUB ON S.STD_COURSE_ID = SUB.SUB_COURSE_ID;

SELECT S.STUDENTS_NAME, SUB.SUBJECT_NAME FROM STUDENTSINFO S RIGHT JOIN SUBJECTS__INFO SUB ON S.STD_COURSE_ID = SUB.SUB_COURSE_ID;

SELECT S.STUDENTS_NAME, SUB.SUBJECT_NAME FROM STUDENTSINFO S FULL OUTER JOIN SUBJECTS__INFO SUB ON S.STD_COURSE_ID = SUB.SUB_COURSE_ID;


--RENAME QUERY ---
EXEC sp_rename 'STUDENTSINFO', 'NEW_TABLE_NAME';
SELECT * FROM NEW_TABLE_NAME;
EXEC SP_RENAME 'NEW_TABLE_NAME','STUDENTSINFO';

--CHARACTERS INPUTES---
SELECT REVERSE(SUBJECT_NAME) FROM SUBJECTS__INFO;
SELECT LOWER(STUDENTS_NAME ) FROM STUDENTSINFO;
SELECT * FROM  STUDENTSINFO WHERE STUDENTS_NAME LIKE'%A%';
SELECT * FROM STUDENTSINFO WHERE STUDENTS_NAME LIKE '%A';
SELECT * FROM STUDENTSINFO WHERE STUDENTS_NAME LIKE 'A%'
SELECT * FROM STUDENTSINFO WHERE AGE>19;
SELECT * FROM STUDENTSINFO WHERE AGE>24;
SELECT * FROM STUDENTSINFO WHERE ADDRESS_INFO='hyderabad-batipur';
select * from STUDENTSINFO where ADDRESS_INFO='lovepur lpu road';
--condition based--
select AVG(MARKS_OBTAIN) from MARKSS___INFO;
SELECT * FROM STUDENTSINFO WHERE STUDENTS_ID >=0 and STUDENTS_ID <= 100000;
select  MAX(AGE) from STUDENTSINFO;
select min(age) from STUDENTSINFO;
select address_info ,COUNT(*) as total_info from STUDENTSINFO GROUP BY address_info;
select SUBSTRING(STUDENTS_NAME,5,2) from STUDENTSINFO;
--NESTED LOOPING-
select STUDENTS_ID,STUDENTS_NAME,EMAIL FROM STUDENTSINFO
WHERE AGE>(SELECT AVG(AGE) FROM STUDENTSINFO);
SELECT STUDENTS_ID,STUDENTS_NAME,EMAIL FROM STUDENTSINFO 
WHERE ADDRESS_INFO=(SELECT ADDRESS_INFO FROM STUDENTSINFO WHERE STUDENTS_ID=9999);
SELECT STUDENTS_ID,STUDENTS_NAME,EMAIL FROM STUDENTSINFO 
WHERE STD_COURSE_ID=(SELECT STD_COURSE_ID FROM STUDENTSINFO WHERE STUDENTS_ID=9999);

SELECT STUDENTS_ID,STUDENTS_NAME FROM STUDENTSINFO 
WHERE LEN( STUDENTS_NAME )=(SELECT MAX(LEN(STUDENTS_NAME)) FROM STUDENTSINFO );

SELECT STUDENTS_ID, STUDENTS_NAME, EMAIL 
FROM STUDENTSINFO 
WHERE LEN(STUDENTS_NAME) = (SELECT MAX(LEN(STUDENTS_NAME)) FROM STUDENTSINFO);
SELECT SUBJECTS__INFO.STD_SUBJECT_ID ,SUBJECTS__INFO.STD_SUBJECT_ID FROM STUDENTSINFO INNER JOIN SUBJECTS__INFO ON SUBJECTS__INFO.STD_SUBJECT_ID  =SUBJECTS__INFO.STD_SUBJECT_ID;
UPDATE STUDENTSINFO SET STUDENTS_NAME ='PAPU' WHERE STUDENTS_ID=99999;
SELECT LOWER(STUDENTS_NAME) FROM STUDENTSINFO;


SELECT COUNT(*) AS TOTAL_COUNTFROM FROM STUDENTSINFO ;
SELECT MAX(STUDENTS_ID) FROM STUDENTSINFO;
SELECT STUDENTSINFO.STUDENTS_NAME ,SUBJECTS__INFO.SUBJECT_NAME FROM STUDENTSINFO INNER JOIN SUBJECTS__INFO ON STUDENTSINFO.STUDENTS_NAME = SUBJECTS__INFO.SUBJECT_NAME;
SELECT * FROM STUDENTSINFO WHERE STUDENTS_NAME LIKE'%A';


-- cursor--
Declare @STUDENTS_ID INT ;
Declare @STUDENTS_NAME VARCHAR(35);

Declare doo cursor for 
select STUDENTS_ID,STUDENTS_NAME from STUDENTSINFO;

open doo;
Fetch NEXT from doo into @STUDENTS_ID,@STUDENTS_NAME;

while @@FETCH_STATUS =0
BEGIN
print 'student_info:' + cast(@STUDENTS_ID as VARCHAR)+'' +@STUDENTS_NAME;
Fetch NEXT from doo into @STUDENTS_ID,@STUDENTS_NAME;
end;

CLOSE doo;
DEALLOCATE doo;

SELECT



-- Declare variables to hold student data
DECLARE @STUDENTS_ID INT;
DECLARE @STUDENTS_NAME VARCHAR(35);
DECLARE @GENDER VARCHAR(50);
DECLARE @AGE INT;
DECLARE @EMAIL VARCHAR(50);
DECLARE @PHONE_NO VARCHAR(50);
DECLARE @ADDRESS_INFO VARCHAR(50);
DECLARE @STD_COURSE_ID INT;
DECLARE @STD_DEPARTMENT_ID INT;

-- Declare cursor to simulate fetching new student data (add students manually for testing)
DECLARE doo CURSOR FOR
SELECT 6666, 'NEW STUDENT 1', 'MALE', 19, 'newstudent1@gmail.com', '9876543210', 'NEW YORK-123', 111, 1
UNION ALL
SELECT 7777, 'NEW STUDENT 2', 'FEMALE', 21, 'newstudent2@gmail.com', '9988776655', 'MUMBAI-456', 222, 2;

-- Open the cursor
OPEN doo;

-- Fetch the first record
FETCH NEXT FROM doo INTO @STUDENTS_ID, @STUDENTS_NAME, @GENDER, @AGE, @EMAIL, @PHONE_NO, @ADDRESS_INFO, @STD_COURSE_ID, @STD_DEPARTMENT_ID;

-- Loop through the cursor and insert new students into STUDENTSINFO table
WHILE @@FETCH_STATUS = 0
BEGIN
    -- Insert new student into STUDENTSINFO table
    INSERT INTO STUDENTSINFO (STUDENTS_ID, STUDENTS_NAME, GENDER, AGE, EMAIL, PHONE_NO, ADDRESS_INFO, STD_COURSE_ID, STD_DEPARTMENT_ID)
    VALUES (@STUDENTS_ID, @STUDENTS_NAME, @GENDER, @AGE, @EMAIL, @PHONE_NO, @ADDRESS_INFO, @STD_COURSE_ID, @STD_DEPARTMENT_ID);

    -- Fetch the next record
    FETCH NEXT FROM doo INTO @STUDENTS_ID, @STUDENTS_NAME, @GENDER, @AGE, @EMAIL, @PHONE_NO, @ADDRESS_INFO, @STD_COURSE_ID, @STD_DEPARTMENT_ID;
END;

-- Close and deallocate the cursor
CLOSE doo;
DEALLOCATE doo;

-- Verify the insertion
SELECT * FROM STUDENTSINFO;







DECLARE @STUDENTS_ID INT;
DECLARE @STUDENTS_NAME VARCHAR(35);
DECLARE @GENDER VARCHAR(50);
DECLARE @AGE INT;

-- Declare cursor for fetching student records to update
DECLARE update_cursor CURSOR FOR 
SELECT STUDENTS_ID, STUDENTS_NAME, GENDER, AGE FROM STUDENTSINFO WHERE AGE < 25;

-- Open the cursor
OPEN update_cursor;

-- Fetch the first record
FETCH NEXT FROM update_cursor INTO @STUDENTS_ID, @STUDENTS_NAME, @GENDER, @AGE;

-- Loop through the cursor
WHILE @@FETCH_STATUS = 0
BEGIN
    -- Update the student's record
    UPDATE STUDENTSINFO
    SET AGE = @AGE + 1  -- For example, increasing age by 1
    WHERE STUDENTS_ID = @STUDENTS_ID;

    -- Fetch the next record
    FETCH NEXT FROM update_cursor INTO @STUDENTS_ID, @STUDENTS_NAME, @GENDER, @AGE;
END;

-- Close and deallocate the cursor
CLOSE update_cursor;
DEALLOCATE update_cursor;

select COUNT( STUDENTS_ID) as totalcount from STUDENTSINFO;
select max(STUDENTS_NAME)as higher_stu_name_lenght from STUDENTSINFO;

DECLARE @AGE INT;
DECLARE @EMAIL VARCHAR(50);
 
DECLARE STU_DETAIL CURSOR FOR SELECT
AGE,EMAIL FROM STUDENTSINFO;

OPEN STU_DETAIL

FETCH NEXT FROM STU_DETAIL INTO @AGE,@EMAIL;
 WHILE @@FETCH_STATUS=0
 BEGIN
 PRINT 'INFO:'+CAST(@AGE AS VARCHAR)+''+ @EMAIL;
 FETCH NEXT FROM STU_DETAIL INTO @AGE,@EMAIL;

 END;

 CLOSE STU_DETAIL;
 DEALLOCATE STU_DETAIL;

 SELECT STUDENTS_ID,STUDENTS_NAME FROM STUDENTSINFO ORDER BY STUDENTS_ID ASC,STUDENTS_NAME DESC;
 SELECT STUDENTS_ID,STUDENTS_NAME FROM STUDENTSINFO ORDER BY STUDENTS_ID DESC,STUDENTS_NAME DESC;

DECLARE @MAR_SUBJECTS_ID INT;
DECLARE @MARKS_OBTAIN  INT;

DECLARE MARKS_STUDENT CURSOR FOR 
SELECT MAR_SUBJECTS_ID ,MARKS_OBTAIN FROM MARKSS___INFO WHERE MARKS_OBTAIN>50;

OPEN MARKS_STUDENT

FETCH NEXT FROM MARKS_STUDENT INTO @MAR_SUBJECTS_ID ,@MARKS_OBTAIN ;

WHILE @@FETCH_STATUS =0
BEGIN
UPDATE MARKSS___INFO SET MAR_STUDENTS_ID= @MAR_SUBJECTS_ID +10 ,MARKS_OBTAIN=@MARKS_OBTAIN WHERE MAR_SUBJECTS_ID=22222;

FETCH NEXT FROM MARKS_STUDENT INTO @MAR_SUBJECTS_ID ,@MARKS_OBTAIN ;
END;
CLOSE MARKS_STUDENT;
DEALLOCATE MARKS_STUDENT;


-- Declare variables
DECLARE @StudentID INT, @CurrentMarks INT;

-- Declare cursor to find students with marks < 50
DECLARE mark_cursor CURSOR FOR
SELECT MAR_STUDENTS_ID, CAST(MARKS_OBTAIN AS INT)
FROM MARKSS___INFO
WHERE CAST(MARKS_OBTAIN AS INT) < 50;

-- Open cursor
OPEN mark_cursor;

-- Fetch the first row
FETCH NEXT FROM mark_cursor INTO @StudentID, @CurrentMarks;

-- Loop through rows
WHILE @@FETCH_STATUS = 0
BEGIN
    -- Update marks by adding 5
    UPDATE MARKSS___INFO
    SET MARKS_OBTAIN = CAST(@CurrentMarks + 5 AS VARCHAR)
    WHERE MAR_STUDENTS_ID = @StudentID;

    -- Fetch next row
    FETCH NEXT FROM mark_cursor INTO @StudentID, @CurrentMarks;
END

-- Close and deallocate cursor
CLOSE mark_cursor;
DEALLOCATE mark_cursor;


